
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  080081e4  080081e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800a2c8  0800a2c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a324  0800a324  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a324  0800a324  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a324  0800a324  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  00003324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a328  0800a328  00003328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a32c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  0800a394  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800a394  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e19  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fb  00000000  00000000  0000aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000519  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019887  00000000  00000000  0000cf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007afe  00000000  00000000  00026808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fab  00000000  00000000  0002e306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c02b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  000c02f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081e4 <__do_global_dtors_aux>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4c05      	ldr	r4, [pc, #20]	@ (80081fc <__do_global_dtors_aux+0x18>)
 80081e8:	7823      	ldrb	r3, [r4, #0]
 80081ea:	b933      	cbnz	r3, 80081fa <__do_global_dtors_aux+0x16>
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__do_global_dtors_aux+0x1c>)
 80081ee:	b113      	cbz	r3, 80081f6 <__do_global_dtors_aux+0x12>
 80081f0:	4804      	ldr	r0, [pc, #16]	@ (8008204 <__do_global_dtors_aux+0x20>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	2301      	movs	r3, #1
 80081f8:	7023      	strb	r3, [r4, #0]
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	20000068 	.word	0x20000068
 8008200:	00000000 	.word	0x00000000
 8008204:	0800a2b0 	.word	0x0800a2b0

08008208 <frame_dummy>:
 8008208:	b508      	push	{r3, lr}
 800820a:	4b03      	ldr	r3, [pc, #12]	@ (8008218 <frame_dummy+0x10>)
 800820c:	b11b      	cbz	r3, 8008216 <frame_dummy+0xe>
 800820e:	4903      	ldr	r1, [pc, #12]	@ (800821c <frame_dummy+0x14>)
 8008210:	4803      	ldr	r0, [pc, #12]	@ (8008220 <frame_dummy+0x18>)
 8008212:	f3af 8000 	nop.w
 8008216:	bd08      	pop	{r3, pc}
 8008218:	00000000 	.word	0x00000000
 800821c:	2000006c 	.word	0x2000006c
 8008220:	0800a2b0 	.word	0x0800a2b0

08008224 <_write>:
#define MAJOR 0   //APP Major version Number
#define MINOR 2   //APP Minor version Number

const uint8_t APP_Version[2] = { MAJOR, MINOR };

int _write(int file, char *data, int len) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) data, len, HAL_MAX_DELAY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	b29a      	uxth	r2, r3
 8008234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4804      	ldr	r0, [pc, #16]	@ (800824c <_write+0x28>)
 800823c:	f001 f9be 	bl	80095bc <HAL_UART_Transmit>
	return len;
 8008240:	687b      	ldr	r3, [r7, #4]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000084 	.word	0x20000084

08008250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008254:	f000 fa3c 	bl	80086d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008258:	f000 f822 	bl	80082a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800825c:	f000 f886 	bl	800836c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8008260:	f000 f85a 	bl	8008318 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting Application\n");
 8008264:	480b      	ldr	r0, [pc, #44]	@ (8008294 <main+0x44>)
 8008266:	f001 fc95 	bl	8009b94 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_SET );
 800826a:	2201      	movs	r2, #1
 800826c:	2104      	movs	r1, #4
 800826e:	480a      	ldr	r0, [pc, #40]	@ (8008298 <main+0x48>)
 8008270:	f000 fd2c 	bl	8008ccc <HAL_GPIO_WritePin>
	    HAL_Delay(200);    //1 Sec delay
 8008274:	20c8      	movs	r0, #200	@ 0xc8
 8008276:	f000 fa8d 	bl	8008794 <HAL_Delay>
	    HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_RESET );
 800827a:	2200      	movs	r2, #0
 800827c:	2104      	movs	r1, #4
 800827e:	4806      	ldr	r0, [pc, #24]	@ (8008298 <main+0x48>)
 8008280:	f000 fd24 	bl	8008ccc <HAL_GPIO_WritePin>
	    HAL_Delay(200);  //1 Sec delay
 8008284:	20c8      	movs	r0, #200	@ 0xc8
 8008286:	f000 fa85 	bl	8008794 <HAL_Delay>
	    printf("Blinking, fuck you STM\n");
 800828a:	4804      	ldr	r0, [pc, #16]	@ (800829c <main+0x4c>)
 800828c:	f001 fc82 	bl	8009b94 <puts>
	    HAL_GPIO_WritePin( GPIOD, GPIO_PIN_2, GPIO_PIN_SET );
 8008290:	bf00      	nop
 8008292:	e7ea      	b.n	800826a <main+0x1a>
 8008294:	0800a2c8 	.word	0x0800a2c8
 8008298:	40011400 	.word	0x40011400
 800829c:	0800a2e0 	.word	0x0800a2e0

080082a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b090      	sub	sp, #64	@ 0x40
 80082a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082a6:	f107 0318 	add.w	r3, r7, #24
 80082aa:	2228      	movs	r2, #40	@ 0x28
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fc78 	bl	8009ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082b4:	1d3b      	adds	r3, r7, #4
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	605a      	str	r2, [r3, #4]
 80082bc:	609a      	str	r2, [r3, #8]
 80082be:	60da      	str	r2, [r3, #12]
 80082c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80082c2:	2302      	movs	r3, #2
 80082c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082c6:	2301      	movs	r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082ca:	2310      	movs	r3, #16
 80082cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082d2:	f107 0318 	add.w	r3, r7, #24
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fd10 	bl	8008cfc <HAL_RCC_OscConfig>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80082e2:	f000 f88d 	bl	8008400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082e6:	230f      	movs	r3, #15
 80082e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082f2:	2300      	movs	r3, #0
 80082f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 ff7e 	bl	8009200 <HAL_RCC_ClockConfig>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800830a:	f000 f879 	bl	8008400 <Error_Handler>
  }
}
 800830e:	bf00      	nop
 8008310:	3740      	adds	r7, #64	@ 0x40
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800831c:	4b11      	ldr	r3, [pc, #68]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 800831e:	4a12      	ldr	r2, [pc, #72]	@ (8008368 <MX_USART3_UART_Init+0x50>)
 8008320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 8008324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800832a:	4b0e      	ldr	r3, [pc, #56]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 800832c:	2200      	movs	r2, #0
 800832e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008330:	4b0c      	ldr	r3, [pc, #48]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 8008332:	2200      	movs	r2, #0
 8008334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008336:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 8008338:	2200      	movs	r2, #0
 800833a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 800833e:	220c      	movs	r2, #12
 8008340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008342:	4b08      	ldr	r3, [pc, #32]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 8008344:	2200      	movs	r2, #0
 8008346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008348:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 800834a:	2200      	movs	r2, #0
 800834c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800834e:	4805      	ldr	r0, [pc, #20]	@ (8008364 <MX_USART3_UART_Init+0x4c>)
 8008350:	f001 f8e4 	bl	800951c <HAL_UART_Init>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800835a:	f000 f851 	bl	8008400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000084 	.word	0x20000084
 8008368:	40004800 	.word	0x40004800

0800836c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008372:	f107 0310 	add.w	r3, r7, #16
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	609a      	str	r2, [r3, #8]
 800837e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008380:	4b1d      	ldr	r3, [pc, #116]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	4a1c      	ldr	r2, [pc, #112]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 8008386:	f043 0308 	orr.w	r3, r3, #8
 800838a:	6193      	str	r3, [r2, #24]
 800838c:	4b1a      	ldr	r3, [pc, #104]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	f003 0308 	and.w	r3, r3, #8
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008398:	4b17      	ldr	r3, [pc, #92]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	4a16      	ldr	r2, [pc, #88]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 800839e:	f043 0304 	orr.w	r3, r3, #4
 80083a2:	6193      	str	r3, [r2, #24]
 80083a4:	4b14      	ldr	r3, [pc, #80]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80083b0:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 80083b6:	f043 0320 	orr.w	r3, r3, #32
 80083ba:	6193      	str	r3, [r2, #24]
 80083bc:	4b0e      	ldr	r3, [pc, #56]	@ (80083f8 <MX_GPIO_Init+0x8c>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80083c8:	2200      	movs	r2, #0
 80083ca:	2104      	movs	r1, #4
 80083cc:	480b      	ldr	r0, [pc, #44]	@ (80083fc <MX_GPIO_Init+0x90>)
 80083ce:	f000 fc7d 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80083d2:	2304      	movs	r3, #4
 80083d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083d6:	2301      	movs	r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083de:	2302      	movs	r3, #2
 80083e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083e2:	f107 0310 	add.w	r3, r7, #16
 80083e6:	4619      	mov	r1, r3
 80083e8:	4804      	ldr	r0, [pc, #16]	@ (80083fc <MX_GPIO_Init+0x90>)
 80083ea:	f000 fadb 	bl	80089a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80083ee:	bf00      	nop
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40021000 	.word	0x40021000
 80083fc:	40011400 	.word	0x40011400

08008400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008404:	b672      	cpsid	i
}
 8008406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <Error_Handler+0x8>

0800840c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008412:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <HAL_MspInit+0x5c>)
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	4a14      	ldr	r2, [pc, #80]	@ (8008468 <HAL_MspInit+0x5c>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6193      	str	r3, [r2, #24]
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <HAL_MspInit+0x5c>)
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	60bb      	str	r3, [r7, #8]
 8008428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <HAL_MspInit+0x5c>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	4a0e      	ldr	r2, [pc, #56]	@ (8008468 <HAL_MspInit+0x5c>)
 8008430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008434:	61d3      	str	r3, [r2, #28]
 8008436:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <HAL_MspInit+0x5c>)
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <HAL_MspInit+0x60>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	4a04      	ldr	r2, [pc, #16]	@ (800846c <HAL_MspInit+0x60>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr
 8008468:	40021000 	.word	0x40021000
 800846c:	40010000 	.word	0x40010000

08008470 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	609a      	str	r2, [r3, #8]
 8008484:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1c      	ldr	r2, [pc, #112]	@ (80084fc <HAL_UART_MspInit+0x8c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d131      	bne.n	80084f4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008490:	4b1b      	ldr	r3, [pc, #108]	@ (8008500 <HAL_UART_MspInit+0x90>)
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	4a1a      	ldr	r2, [pc, #104]	@ (8008500 <HAL_UART_MspInit+0x90>)
 8008496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800849a:	61d3      	str	r3, [r2, #28]
 800849c:	4b18      	ldr	r3, [pc, #96]	@ (8008500 <HAL_UART_MspInit+0x90>)
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084a8:	4b15      	ldr	r3, [pc, #84]	@ (8008500 <HAL_UART_MspInit+0x90>)
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	4a14      	ldr	r2, [pc, #80]	@ (8008500 <HAL_UART_MspInit+0x90>)
 80084ae:	f043 0308 	orr.w	r3, r3, #8
 80084b2:	6193      	str	r3, [r2, #24]
 80084b4:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <HAL_UART_MspInit+0x90>)
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80084c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c6:	2302      	movs	r3, #2
 80084c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084ca:	2303      	movs	r3, #3
 80084cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ce:	f107 0310 	add.w	r3, r7, #16
 80084d2:	4619      	mov	r1, r3
 80084d4:	480b      	ldr	r0, [pc, #44]	@ (8008504 <HAL_UART_MspInit+0x94>)
 80084d6:	f000 fa65 	bl	80089a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80084da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	4619      	mov	r1, r3
 80084ee:	4805      	ldr	r0, [pc, #20]	@ (8008504 <HAL_UART_MspInit+0x94>)
 80084f0:	f000 fa58 	bl	80089a4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80084f4:	bf00      	nop
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	40004800 	.word	0x40004800
 8008500:	40021000 	.word	0x40021000
 8008504:	40010c00 	.word	0x40010c00

08008508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800850c:	bf00      	nop
 800850e:	e7fd      	b.n	800850c <NMI_Handler+0x4>

08008510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <HardFault_Handler+0x4>

08008518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <MemManage_Handler+0x4>

08008520 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <BusFault_Handler+0x4>

08008528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800852c:	bf00      	nop
 800852e:	e7fd      	b.n	800852c <UsageFault_Handler+0x4>

08008530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008540:	bf00      	nop
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008558:	f000 f900 	bl	800875c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800855c:	bf00      	nop
 800855e:	bd80      	pop	{r7, pc}

08008560 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e00a      	b.n	8008588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008572:	f3af 8000 	nop.w
 8008576:	4601      	mov	r1, r0
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	60ba      	str	r2, [r7, #8]
 800857e:	b2ca      	uxtb	r2, r1
 8008580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	3301      	adds	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	429a      	cmp	r2, r3
 800858e:	dbf0      	blt.n	8008572 <_read+0x12>
  }

  return len;
 8008590:	687b      	ldr	r3, [r7, #4]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <_close>:
  }
  return len;
}

int _close(int file)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr

080085b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085c0:	605a      	str	r2, [r3, #4]
  return 0;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <_isatty>:

int _isatty(int file)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80085d6:	2301      	movs	r3, #1
}
 80085d8:	4618      	mov	r0, r3
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr

080085e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
	...

080085fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008604:	4a14      	ldr	r2, [pc, #80]	@ (8008658 <_sbrk+0x5c>)
 8008606:	4b15      	ldr	r3, [pc, #84]	@ (800865c <_sbrk+0x60>)
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008610:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <_sbrk+0x64>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008618:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <_sbrk+0x64>)
 800861a:	4a12      	ldr	r2, [pc, #72]	@ (8008664 <_sbrk+0x68>)
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800861e:	4b10      	ldr	r3, [pc, #64]	@ (8008660 <_sbrk+0x64>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	429a      	cmp	r2, r3
 800862a:	d207      	bcs.n	800863c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800862c:	f001 fac2 	bl	8009bb4 <__errno>
 8008630:	4603      	mov	r3, r0
 8008632:	220c      	movs	r2, #12
 8008634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800863a:	e009      	b.n	8008650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800863c:	4b08      	ldr	r3, [pc, #32]	@ (8008660 <_sbrk+0x64>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008642:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <_sbrk+0x64>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	4a05      	ldr	r2, [pc, #20]	@ (8008660 <_sbrk+0x64>)
 800864c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800864e:	68fb      	ldr	r3, [r7, #12]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	2000c000 	.word	0x2000c000
 800865c:	00000400 	.word	0x00000400
 8008660:	200000cc 	.word	0x200000cc
 8008664:	20000220 	.word	0x20000220

08008668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800866c:	4b03      	ldr	r3, [pc, #12]	@ (800867c <SystemInit+0x14>)
 800866e:	4a04      	ldr	r2, [pc, #16]	@ (8008680 <SystemInit+0x18>)
 8008670:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008672:	bf00      	nop
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	e000ed00 	.word	0xe000ed00
 8008680:	08008000 	.word	0x08008000

08008684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008684:	f7ff fff0 	bl	8008668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008688:	480b      	ldr	r0, [pc, #44]	@ (80086b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800868a:	490c      	ldr	r1, [pc, #48]	@ (80086bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800868c:	4a0c      	ldr	r2, [pc, #48]	@ (80086c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800868e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008690:	e002      	b.n	8008698 <LoopCopyDataInit>

08008692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008696:	3304      	adds	r3, #4

08008698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800869a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800869c:	d3f9      	bcc.n	8008692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800869e:	4a09      	ldr	r2, [pc, #36]	@ (80086c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80086a0:	4c09      	ldr	r4, [pc, #36]	@ (80086c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80086a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086a4:	e001      	b.n	80086aa <LoopFillZerobss>

080086a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086a8:	3204      	adds	r2, #4

080086aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086ac:	d3fb      	bcc.n	80086a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80086ae:	f001 fa87 	bl	8009bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80086b2:	f7ff fdcd 	bl	8008250 <main>
  bx lr
 80086b6:	4770      	bx	lr
  ldr r0, =_sdata
 80086b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80086c0:	0800a32c 	.word	0x0800a32c
  ldr r2, =_sbss
 80086c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80086c8:	20000220 	.word	0x20000220

080086cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80086cc:	e7fe      	b.n	80086cc <ADC1_2_IRQHandler>
	...

080086d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086d4:	4b08      	ldr	r3, [pc, #32]	@ (80086f8 <HAL_Init+0x28>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a07      	ldr	r2, [pc, #28]	@ (80086f8 <HAL_Init+0x28>)
 80086da:	f043 0310 	orr.w	r3, r3, #16
 80086de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086e0:	2003      	movs	r0, #3
 80086e2:	f000 f92b 	bl	800893c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086e6:	200f      	movs	r0, #15
 80086e8:	f000 f808 	bl	80086fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086ec:	f7ff fe8e 	bl	800840c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	40022000 	.word	0x40022000

080086fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008704:	4b12      	ldr	r3, [pc, #72]	@ (8008750 <HAL_InitTick+0x54>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <HAL_InitTick+0x58>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	4619      	mov	r1, r3
 800870e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008712:	fbb3 f3f1 	udiv	r3, r3, r1
 8008716:	fbb2 f3f3 	udiv	r3, r2, r3
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f935 	bl	800898a <HAL_SYSTICK_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e00e      	b.n	8008748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b0f      	cmp	r3, #15
 800872e:	d80a      	bhi.n	8008746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008730:	2200      	movs	r2, #0
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008738:	f000 f90b 	bl	8008952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800873c:	4a06      	ldr	r2, [pc, #24]	@ (8008758 <HAL_InitTick+0x5c>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20000000 	.word	0x20000000
 8008754:	20000008 	.word	0x20000008
 8008758:	20000004 	.word	0x20000004

0800875c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008760:	4b05      	ldr	r3, [pc, #20]	@ (8008778 <HAL_IncTick+0x1c>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	4b05      	ldr	r3, [pc, #20]	@ (800877c <HAL_IncTick+0x20>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4413      	add	r3, r2
 800876c:	4a03      	ldr	r2, [pc, #12]	@ (800877c <HAL_IncTick+0x20>)
 800876e:	6013      	str	r3, [r2, #0]
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr
 8008778:	20000008 	.word	0x20000008
 800877c:	200000d0 	.word	0x200000d0

08008780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  return uwTick;
 8008784:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <HAL_GetTick+0x10>)
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr
 8008790:	200000d0 	.word	0x200000d0

08008794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800879c:	f7ff fff0 	bl	8008780 <HAL_GetTick>
 80087a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087ac:	d005      	beq.n	80087ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80087ae:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <HAL_Delay+0x44>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087ba:	bf00      	nop
 80087bc:	f7ff ffe0 	bl	8008780 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d8f7      	bhi.n	80087bc <HAL_Delay+0x28>
  {
  }
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000008 	.word	0x20000008

080087dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008820 <__NVIC_SetPriorityGrouping+0x44>)
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80087f8:	4013      	ands	r3, r2
 80087fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800880c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800880e:	4a04      	ldr	r2, [pc, #16]	@ (8008820 <__NVIC_SetPriorityGrouping+0x44>)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	60d3      	str	r3, [r2, #12]
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	e000ed00 	.word	0xe000ed00

08008824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008828:	4b04      	ldr	r3, [pc, #16]	@ (800883c <__NVIC_GetPriorityGrouping+0x18>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	0a1b      	lsrs	r3, r3, #8
 800882e:	f003 0307 	and.w	r3, r3, #7
}
 8008832:	4618      	mov	r0, r3
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000ed00 	.word	0xe000ed00

08008840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800884c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008850:	2b00      	cmp	r3, #0
 8008852:	db0a      	blt.n	800886a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	490c      	ldr	r1, [pc, #48]	@ (800888c <__NVIC_SetPriority+0x4c>)
 800885a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800885e:	0112      	lsls	r2, r2, #4
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	440b      	add	r3, r1
 8008864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008868:	e00a      	b.n	8008880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4908      	ldr	r1, [pc, #32]	@ (8008890 <__NVIC_SetPriority+0x50>)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	3b04      	subs	r3, #4
 8008878:	0112      	lsls	r2, r2, #4
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	440b      	add	r3, r1
 800887e:	761a      	strb	r2, [r3, #24]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	e000e100 	.word	0xe000e100
 8008890:	e000ed00 	.word	0xe000ed00

08008894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008894:	b480      	push	{r7}
 8008896:	b089      	sub	sp, #36	@ 0x24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f1c3 0307 	rsb	r3, r3, #7
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	bf28      	it	cs
 80088b2:	2304      	movcs	r3, #4
 80088b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3304      	adds	r3, #4
 80088ba:	2b06      	cmp	r3, #6
 80088bc:	d902      	bls.n	80088c4 <NVIC_EncodePriority+0x30>
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3b03      	subs	r3, #3
 80088c2:	e000      	b.n	80088c6 <NVIC_EncodePriority+0x32>
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	43da      	mvns	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	401a      	ands	r2, r3
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	43d9      	mvns	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088ec:	4313      	orrs	r3, r2
         );
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3724      	adds	r7, #36	@ 0x24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr

080088f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3b01      	subs	r3, #1
 8008904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008908:	d301      	bcc.n	800890e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800890a:	2301      	movs	r3, #1
 800890c:	e00f      	b.n	800892e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800890e:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <SysTick_Config+0x40>)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3b01      	subs	r3, #1
 8008914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008916:	210f      	movs	r1, #15
 8008918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800891c:	f7ff ff90 	bl	8008840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008920:	4b05      	ldr	r3, [pc, #20]	@ (8008938 <SysTick_Config+0x40>)
 8008922:	2200      	movs	r2, #0
 8008924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008926:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <SysTick_Config+0x40>)
 8008928:	2207      	movs	r2, #7
 800892a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	e000e010 	.word	0xe000e010

0800893c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ff49 	bl	80087dc <__NVIC_SetPriorityGrouping>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	4603      	mov	r3, r0
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008964:	f7ff ff5e 	bl	8008824 <__NVIC_GetPriorityGrouping>
 8008968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	6978      	ldr	r0, [r7, #20]
 8008970:	f7ff ff90 	bl	8008894 <NVIC_EncodePriority>
 8008974:	4602      	mov	r2, r0
 8008976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff ff5f 	bl	8008840 <__NVIC_SetPriority>
}
 8008982:	bf00      	nop
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff ffb0 	bl	80088f8 <SysTick_Config>
 8008998:	4603      	mov	r3, r0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b08b      	sub	sp, #44	@ 0x2c
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80089ae:	2300      	movs	r3, #0
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80089b2:	2300      	movs	r3, #0
 80089b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089b6:	e179      	b.n	8008cac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80089b8:	2201      	movs	r2, #1
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	4013      	ands	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	f040 8168 	bne.w	8008ca6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	4a96      	ldr	r2, [pc, #600]	@ (8008c34 <HAL_GPIO_Init+0x290>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d05e      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
 80089e0:	4a94      	ldr	r2, [pc, #592]	@ (8008c34 <HAL_GPIO_Init+0x290>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d875      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 80089e6:	4a94      	ldr	r2, [pc, #592]	@ (8008c38 <HAL_GPIO_Init+0x294>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d058      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
 80089ec:	4a92      	ldr	r2, [pc, #584]	@ (8008c38 <HAL_GPIO_Init+0x294>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d86f      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 80089f2:	4a92      	ldr	r2, [pc, #584]	@ (8008c3c <HAL_GPIO_Init+0x298>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d052      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
 80089f8:	4a90      	ldr	r2, [pc, #576]	@ (8008c3c <HAL_GPIO_Init+0x298>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d869      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 80089fe:	4a90      	ldr	r2, [pc, #576]	@ (8008c40 <HAL_GPIO_Init+0x29c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d04c      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
 8008a04:	4a8e      	ldr	r2, [pc, #568]	@ (8008c40 <HAL_GPIO_Init+0x29c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d863      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 8008a0a:	4a8e      	ldr	r2, [pc, #568]	@ (8008c44 <HAL_GPIO_Init+0x2a0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d046      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
 8008a10:	4a8c      	ldr	r2, [pc, #560]	@ (8008c44 <HAL_GPIO_Init+0x2a0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d85d      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 8008a16:	2b12      	cmp	r3, #18
 8008a18:	d82a      	bhi.n	8008a70 <HAL_GPIO_Init+0xcc>
 8008a1a:	2b12      	cmp	r3, #18
 8008a1c:	d859      	bhi.n	8008ad2 <HAL_GPIO_Init+0x12e>
 8008a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <HAL_GPIO_Init+0x80>)
 8008a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a24:	08008a9f 	.word	0x08008a9f
 8008a28:	08008a79 	.word	0x08008a79
 8008a2c:	08008a8b 	.word	0x08008a8b
 8008a30:	08008acd 	.word	0x08008acd
 8008a34:	08008ad3 	.word	0x08008ad3
 8008a38:	08008ad3 	.word	0x08008ad3
 8008a3c:	08008ad3 	.word	0x08008ad3
 8008a40:	08008ad3 	.word	0x08008ad3
 8008a44:	08008ad3 	.word	0x08008ad3
 8008a48:	08008ad3 	.word	0x08008ad3
 8008a4c:	08008ad3 	.word	0x08008ad3
 8008a50:	08008ad3 	.word	0x08008ad3
 8008a54:	08008ad3 	.word	0x08008ad3
 8008a58:	08008ad3 	.word	0x08008ad3
 8008a5c:	08008ad3 	.word	0x08008ad3
 8008a60:	08008ad3 	.word	0x08008ad3
 8008a64:	08008ad3 	.word	0x08008ad3
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a95 	.word	0x08008a95
 8008a70:	4a75      	ldr	r2, [pc, #468]	@ (8008c48 <HAL_GPIO_Init+0x2a4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008a76:	e02c      	b.n	8008ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	623b      	str	r3, [r7, #32]
          break;
 8008a7e:	e029      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	3304      	adds	r3, #4
 8008a86:	623b      	str	r3, [r7, #32]
          break;
 8008a88:	e024      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	623b      	str	r3, [r7, #32]
          break;
 8008a92:	e01f      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	623b      	str	r3, [r7, #32]
          break;
 8008a9c:	e01a      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d102      	bne.n	8008aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	623b      	str	r3, [r7, #32]
          break;
 8008aaa:	e013      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d105      	bne.n	8008ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	611a      	str	r2, [r3, #16]
          break;
 8008abe:	e009      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	615a      	str	r2, [r3, #20]
          break;
 8008aca:	e003      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008acc:	2300      	movs	r3, #0
 8008ace:	623b      	str	r3, [r7, #32]
          break;
 8008ad0:	e000      	b.n	8008ad4 <HAL_GPIO_Init+0x130>
          break;
 8008ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2bff      	cmp	r3, #255	@ 0xff
 8008ad8:	d801      	bhi.n	8008ade <HAL_GPIO_Init+0x13a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	e001      	b.n	8008ae2 <HAL_GPIO_Init+0x13e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2bff      	cmp	r3, #255	@ 0xff
 8008ae8:	d802      	bhi.n	8008af0 <HAL_GPIO_Init+0x14c>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	e002      	b.n	8008af6 <HAL_GPIO_Init+0x152>
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	3b08      	subs	r3, #8
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	210f      	movs	r1, #15
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	fa01 f303 	lsl.w	r3, r1, r3
 8008b04:	43db      	mvns	r3, r3
 8008b06:	401a      	ands	r2, r3
 8008b08:	6a39      	ldr	r1, [r7, #32]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b10:	431a      	orrs	r2, r3
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80c1 	beq.w	8008ca6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008b24:	4b49      	ldr	r3, [pc, #292]	@ (8008c4c <HAL_GPIO_Init+0x2a8>)
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	4a48      	ldr	r2, [pc, #288]	@ (8008c4c <HAL_GPIO_Init+0x2a8>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6193      	str	r3, [r2, #24]
 8008b30:	4b46      	ldr	r3, [pc, #280]	@ (8008c4c <HAL_GPIO_Init+0x2a8>)
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008b3c:	4a44      	ldr	r2, [pc, #272]	@ (8008c50 <HAL_GPIO_Init+0x2ac>)
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	089b      	lsrs	r3, r3, #2
 8008b42:	3302      	adds	r3, #2
 8008b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	220f      	movs	r2, #15
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a3c      	ldr	r2, [pc, #240]	@ (8008c54 <HAL_GPIO_Init+0x2b0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01f      	beq.n	8008ba8 <HAL_GPIO_Init+0x204>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a3b      	ldr	r2, [pc, #236]	@ (8008c58 <HAL_GPIO_Init+0x2b4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d019      	beq.n	8008ba4 <HAL_GPIO_Init+0x200>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a3a      	ldr	r2, [pc, #232]	@ (8008c5c <HAL_GPIO_Init+0x2b8>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d013      	beq.n	8008ba0 <HAL_GPIO_Init+0x1fc>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a39      	ldr	r2, [pc, #228]	@ (8008c60 <HAL_GPIO_Init+0x2bc>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00d      	beq.n	8008b9c <HAL_GPIO_Init+0x1f8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a38      	ldr	r2, [pc, #224]	@ (8008c64 <HAL_GPIO_Init+0x2c0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d007      	beq.n	8008b98 <HAL_GPIO_Init+0x1f4>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a37      	ldr	r2, [pc, #220]	@ (8008c68 <HAL_GPIO_Init+0x2c4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d101      	bne.n	8008b94 <HAL_GPIO_Init+0x1f0>
 8008b90:	2305      	movs	r3, #5
 8008b92:	e00a      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008b94:	2306      	movs	r3, #6
 8008b96:	e008      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	e006      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e004      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e002      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <HAL_GPIO_Init+0x206>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bac:	f002 0203 	and.w	r2, r2, #3
 8008bb0:	0092      	lsls	r2, r2, #2
 8008bb2:	4093      	lsls	r3, r2
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008bba:	4925      	ldr	r1, [pc, #148]	@ (8008c50 <HAL_GPIO_Init+0x2ac>)
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d006      	beq.n	8008be2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008bd4:	4b25      	ldr	r3, [pc, #148]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	4924      	ldr	r1, [pc, #144]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	608b      	str	r3, [r1, #8]
 8008be0:	e006      	b.n	8008bf0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008be2:	4b22      	ldr	r3, [pc, #136]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	43db      	mvns	r3, r3
 8008bea:	4920      	ldr	r1, [pc, #128]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	491a      	ldr	r1, [pc, #104]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60cb      	str	r3, [r1, #12]
 8008c08:	e006      	b.n	8008c18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008c0a:	4b18      	ldr	r3, [pc, #96]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	43db      	mvns	r3, r3
 8008c12:	4916      	ldr	r1, [pc, #88]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d025      	beq.n	8008c70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008c24:	4b11      	ldr	r3, [pc, #68]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	4910      	ldr	r1, [pc, #64]	@ (8008c6c <HAL_GPIO_Init+0x2c8>)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	604b      	str	r3, [r1, #4]
 8008c30:	e025      	b.n	8008c7e <HAL_GPIO_Init+0x2da>
 8008c32:	bf00      	nop
 8008c34:	10320000 	.word	0x10320000
 8008c38:	10310000 	.word	0x10310000
 8008c3c:	10220000 	.word	0x10220000
 8008c40:	10210000 	.word	0x10210000
 8008c44:	10120000 	.word	0x10120000
 8008c48:	10110000 	.word	0x10110000
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40010800 	.word	0x40010800
 8008c58:	40010c00 	.word	0x40010c00
 8008c5c:	40011000 	.word	0x40011000
 8008c60:	40011400 	.word	0x40011400
 8008c64:	40011800 	.word	0x40011800
 8008c68:	40011c00 	.word	0x40011c00
 8008c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008c70:	4b15      	ldr	r3, [pc, #84]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	43db      	mvns	r3, r3
 8008c78:	4913      	ldr	r1, [pc, #76]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d006      	beq.n	8008c98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	490e      	ldr	r1, [pc, #56]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	600b      	str	r3, [r1, #0]
 8008c96:	e006      	b.n	8008ca6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008c98:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	4909      	ldr	r1, [pc, #36]	@ (8008cc8 <HAL_GPIO_Init+0x324>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	3301      	adds	r3, #1
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f47f ae7e 	bne.w	80089b8 <HAL_GPIO_Init+0x14>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	372c      	adds	r7, #44	@ 0x2c
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bc80      	pop	{r7}
 8008cc6:	4770      	bx	lr
 8008cc8:	40010400 	.word	0x40010400

08008ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cdc:	787b      	ldrb	r3, [r7, #1]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ce2:	887a      	ldrh	r2, [r7, #2]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008ce8:	e003      	b.n	8008cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	041a      	lsls	r2, r3, #16
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	611a      	str	r2, [r3, #16]
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e272      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8087 	beq.w	8008e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d1c:	4b92      	ldr	r3, [pc, #584]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f003 030c 	and.w	r3, r3, #12
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d00c      	beq.n	8008d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008d28:	4b8f      	ldr	r3, [pc, #572]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f003 030c 	and.w	r3, r3, #12
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d112      	bne.n	8008d5a <HAL_RCC_OscConfig+0x5e>
 8008d34:	4b8c      	ldr	r3, [pc, #560]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d40:	d10b      	bne.n	8008d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d42:	4b89      	ldr	r3, [pc, #548]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d06c      	beq.n	8008e28 <HAL_RCC_OscConfig+0x12c>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d168      	bne.n	8008e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e24c      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d62:	d106      	bne.n	8008d72 <HAL_RCC_OscConfig+0x76>
 8008d64:	4b80      	ldr	r3, [pc, #512]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a7f      	ldr	r2, [pc, #508]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e02e      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd4>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10c      	bne.n	8008d94 <HAL_RCC_OscConfig+0x98>
 8008d7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7a      	ldr	r2, [pc, #488]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	4b78      	ldr	r3, [pc, #480]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a77      	ldr	r2, [pc, #476]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e01d      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd4>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d9c:	d10c      	bne.n	8008db8 <HAL_RCC_OscConfig+0xbc>
 8008d9e:	4b72      	ldr	r3, [pc, #456]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a71      	ldr	r2, [pc, #452]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	4b6f      	ldr	r3, [pc, #444]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a6e      	ldr	r2, [pc, #440]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	e00b      	b.n	8008dd0 <HAL_RCC_OscConfig+0xd4>
 8008db8:	4b6b      	ldr	r3, [pc, #428]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a6a      	ldr	r2, [pc, #424]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	4b68      	ldr	r3, [pc, #416]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a67      	ldr	r2, [pc, #412]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d013      	beq.n	8008e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd8:	f7ff fcd2 	bl	8008780 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008de0:	f7ff fcce 	bl	8008780 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b64      	cmp	r3, #100	@ 0x64
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e200      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008df2:	4b5d      	ldr	r3, [pc, #372]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0xe4>
 8008dfe:	e014      	b.n	8008e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e00:	f7ff fcbe 	bl	8008780 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e08:	f7ff fcba 	bl	8008780 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b64      	cmp	r3, #100	@ 0x64
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e1ec      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e1a:	4b53      	ldr	r3, [pc, #332]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0x10c>
 8008e26:	e000      	b.n	8008e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d063      	beq.n	8008efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e36:	4b4c      	ldr	r3, [pc, #304]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008e42:	4b49      	ldr	r3, [pc, #292]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f003 030c 	and.w	r3, r3, #12
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d11c      	bne.n	8008e88 <HAL_RCC_OscConfig+0x18c>
 8008e4e:	4b46      	ldr	r3, [pc, #280]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d116      	bne.n	8008e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e5a:	4b43      	ldr	r3, [pc, #268]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_RCC_OscConfig+0x176>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d001      	beq.n	8008e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e1c0      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e72:	4b3d      	ldr	r3, [pc, #244]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	4939      	ldr	r1, [pc, #228]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e86:	e03a      	b.n	8008efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d020      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e90:	4b36      	ldr	r3, [pc, #216]	@ (8008f6c <HAL_RCC_OscConfig+0x270>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e96:	f7ff fc73 	bl	8008780 <HAL_GetTick>
 8008e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7ff fc6f 	bl	8008780 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e1a1      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4927      	ldr	r1, [pc, #156]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	600b      	str	r3, [r1, #0]
 8008ed0:	e015      	b.n	8008efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed2:	4b26      	ldr	r3, [pc, #152]	@ (8008f6c <HAL_RCC_OscConfig+0x270>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed8:	f7ff fc52 	bl	8008780 <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ee0:	f7ff fc4e 	bl	8008780 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e180      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d03a      	beq.n	8008f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d019      	beq.n	8008f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f12:	4b17      	ldr	r3, [pc, #92]	@ (8008f70 <HAL_RCC_OscConfig+0x274>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f18:	f7ff fc32 	bl	8008780 <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f20:	f7ff fc2e 	bl	8008780 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e160      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f32:	4b0d      	ldr	r3, [pc, #52]	@ (8008f68 <HAL_RCC_OscConfig+0x26c>)
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008f3e:	2001      	movs	r0, #1
 8008f40:	f000 face 	bl	80094e0 <RCC_Delay>
 8008f44:	e01c      	b.n	8008f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f46:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <HAL_RCC_OscConfig+0x274>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f4c:	f7ff fc18 	bl	8008780 <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f52:	e00f      	b.n	8008f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f54:	f7ff fc14 	bl	8008780 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d908      	bls.n	8008f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e146      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
 8008f66:	bf00      	nop
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	42420000 	.word	0x42420000
 8008f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f74:	4b92      	ldr	r3, [pc, #584]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e9      	bne.n	8008f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80a6 	beq.w	80090da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f92:	4b8b      	ldr	r3, [pc, #556]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10d      	bne.n	8008fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f9e:	4b88      	ldr	r3, [pc, #544]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	4a87      	ldr	r2, [pc, #540]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fa8:	61d3      	str	r3, [r2, #28]
 8008faa:	4b85      	ldr	r3, [pc, #532]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fb2:	60bb      	str	r3, [r7, #8]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fba:	4b82      	ldr	r3, [pc, #520]	@ (80091c4 <HAL_RCC_OscConfig+0x4c8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d118      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80091c4 <HAL_RCC_OscConfig+0x4c8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a7e      	ldr	r2, [pc, #504]	@ (80091c4 <HAL_RCC_OscConfig+0x4c8>)
 8008fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fd2:	f7ff fbd5 	bl	8008780 <HAL_GetTick>
 8008fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fda:	f7ff fbd1 	bl	8008780 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b64      	cmp	r3, #100	@ 0x64
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e103      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fec:	4b75      	ldr	r3, [pc, #468]	@ (80091c4 <HAL_RCC_OscConfig+0x4c8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0f0      	beq.n	8008fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d106      	bne.n	800900e <HAL_RCC_OscConfig+0x312>
 8009000:	4b6f      	ldr	r3, [pc, #444]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009002:	6a1b      	ldr	r3, [r3, #32]
 8009004:	4a6e      	ldr	r2, [pc, #440]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	6213      	str	r3, [r2, #32]
 800900c:	e02d      	b.n	800906a <HAL_RCC_OscConfig+0x36e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10c      	bne.n	8009030 <HAL_RCC_OscConfig+0x334>
 8009016:	4b6a      	ldr	r3, [pc, #424]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	4a69      	ldr	r2, [pc, #420]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	6213      	str	r3, [r2, #32]
 8009022:	4b67      	ldr	r3, [pc, #412]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	4a66      	ldr	r2, [pc, #408]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009028:	f023 0304 	bic.w	r3, r3, #4
 800902c:	6213      	str	r3, [r2, #32]
 800902e:	e01c      	b.n	800906a <HAL_RCC_OscConfig+0x36e>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b05      	cmp	r3, #5
 8009036:	d10c      	bne.n	8009052 <HAL_RCC_OscConfig+0x356>
 8009038:	4b61      	ldr	r3, [pc, #388]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	4a60      	ldr	r2, [pc, #384]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800903e:	f043 0304 	orr.w	r3, r3, #4
 8009042:	6213      	str	r3, [r2, #32]
 8009044:	4b5e      	ldr	r3, [pc, #376]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	4a5d      	ldr	r2, [pc, #372]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	6213      	str	r3, [r2, #32]
 8009050:	e00b      	b.n	800906a <HAL_RCC_OscConfig+0x36e>
 8009052:	4b5b      	ldr	r3, [pc, #364]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	4a5a      	ldr	r2, [pc, #360]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009058:	f023 0301 	bic.w	r3, r3, #1
 800905c:	6213      	str	r3, [r2, #32]
 800905e:	4b58      	ldr	r3, [pc, #352]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	4a57      	ldr	r2, [pc, #348]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009064:	f023 0304 	bic.w	r3, r3, #4
 8009068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d015      	beq.n	800909e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009072:	f7ff fb85 	bl	8008780 <HAL_GetTick>
 8009076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009078:	e00a      	b.n	8009090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907a:	f7ff fb81 	bl	8008780 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009088:	4293      	cmp	r3, r2
 800908a:	d901      	bls.n	8009090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e0b1      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009090:	4b4b      	ldr	r3, [pc, #300]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0ee      	beq.n	800907a <HAL_RCC_OscConfig+0x37e>
 800909c:	e014      	b.n	80090c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800909e:	f7ff fb6f 	bl	8008780 <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090a4:	e00a      	b.n	80090bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090a6:	f7ff fb6b 	bl	8008780 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d901      	bls.n	80090bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e09b      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090bc:	4b40      	ldr	r3, [pc, #256]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1ee      	bne.n	80090a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d105      	bne.n	80090da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090ce:	4b3c      	ldr	r3, [pc, #240]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	4a3b      	ldr	r2, [pc, #236]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 80090d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 8087 	beq.w	80091f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090e4:	4b36      	ldr	r3, [pc, #216]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f003 030c 	and.w	r3, r3, #12
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d061      	beq.n	80091b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d146      	bne.n	8009186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090f8:	4b33      	ldr	r3, [pc, #204]	@ (80091c8 <HAL_RCC_OscConfig+0x4cc>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090fe:	f7ff fb3f 	bl	8008780 <HAL_GetTick>
 8009102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009104:	e008      	b.n	8009118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009106:	f7ff fb3b 	bl	8008780 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e06d      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009118:	4b29      	ldr	r3, [pc, #164]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f0      	bne.n	8009106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800912c:	d108      	bne.n	8009140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	4921      	ldr	r1, [pc, #132]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800913c:	4313      	orrs	r3, r2
 800913e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009140:	4b1f      	ldr	r3, [pc, #124]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a19      	ldr	r1, [r3, #32]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009150:	430b      	orrs	r3, r1
 8009152:	491b      	ldr	r1, [pc, #108]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 8009154:	4313      	orrs	r3, r2
 8009156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009158:	4b1b      	ldr	r3, [pc, #108]	@ (80091c8 <HAL_RCC_OscConfig+0x4cc>)
 800915a:	2201      	movs	r2, #1
 800915c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800915e:	f7ff fb0f 	bl	8008780 <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009166:	f7ff fb0b 	bl	8008780 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e03d      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009178:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <HAL_RCC_OscConfig+0x46a>
 8009184:	e035      	b.n	80091f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009186:	4b10      	ldr	r3, [pc, #64]	@ (80091c8 <HAL_RCC_OscConfig+0x4cc>)
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800918c:	f7ff faf8 	bl	8008780 <HAL_GetTick>
 8009190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009192:	e008      	b.n	80091a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009194:	f7ff faf4 	bl	8008780 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e026      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091a6:	4b06      	ldr	r3, [pc, #24]	@ (80091c0 <HAL_RCC_OscConfig+0x4c4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f0      	bne.n	8009194 <HAL_RCC_OscConfig+0x498>
 80091b2:	e01e      	b.n	80091f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d107      	bne.n	80091cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e019      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40007000 	.word	0x40007000
 80091c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091cc:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <HAL_RCC_OscConfig+0x500>)
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d106      	bne.n	80091ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d001      	beq.n	80091f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	40021000 	.word	0x40021000

08009200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e0d0      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009214:	4b6a      	ldr	r3, [pc, #424]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d910      	bls.n	8009244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009222:	4b67      	ldr	r3, [pc, #412]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f023 0207 	bic.w	r2, r3, #7
 800922a:	4965      	ldr	r1, [pc, #404]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	4313      	orrs	r3, r2
 8009230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009232:	4b63      	ldr	r3, [pc, #396]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d001      	beq.n	8009244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0b8      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d020      	beq.n	8009292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800925c:	4b59      	ldr	r3, [pc, #356]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a58      	ldr	r2, [pc, #352]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009262:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009274:	4b53      	ldr	r3, [pc, #332]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4a52      	ldr	r2, [pc, #328]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800927a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800927e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009280:	4b50      	ldr	r3, [pc, #320]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	494d      	ldr	r1, [pc, #308]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800928e:	4313      	orrs	r3, r2
 8009290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d040      	beq.n	8009320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d107      	bne.n	80092b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092a6:	4b47      	ldr	r3, [pc, #284]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d115      	bne.n	80092de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e07f      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d107      	bne.n	80092ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092be:	4b41      	ldr	r3, [pc, #260]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e073      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ce:	4b3d      	ldr	r3, [pc, #244]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e06b      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092de:	4b39      	ldr	r3, [pc, #228]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f023 0203 	bic.w	r2, r3, #3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	4936      	ldr	r1, [pc, #216]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092f0:	f7ff fa46 	bl	8008780 <HAL_GetTick>
 80092f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092f6:	e00a      	b.n	800930e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092f8:	f7ff fa42 	bl	8008780 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009306:	4293      	cmp	r3, r2
 8009308:	d901      	bls.n	800930e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e053      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800930e:	4b2d      	ldr	r3, [pc, #180]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f003 020c 	and.w	r2, r3, #12
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	429a      	cmp	r2, r3
 800931e:	d1eb      	bne.n	80092f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009320:	4b27      	ldr	r3, [pc, #156]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d210      	bcs.n	8009350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932e:	4b24      	ldr	r3, [pc, #144]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f023 0207 	bic.w	r2, r3, #7
 8009336:	4922      	ldr	r1, [pc, #136]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	4313      	orrs	r3, r2
 800933c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800933e:	4b20      	ldr	r3, [pc, #128]	@ (80093c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0307 	and.w	r3, r3, #7
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d001      	beq.n	8009350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e032      	b.n	80093b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b00      	cmp	r3, #0
 800935a:	d008      	beq.n	800936e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800935c:	4b19      	ldr	r3, [pc, #100]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	4916      	ldr	r1, [pc, #88]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800937a:	4b12      	ldr	r3, [pc, #72]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	490e      	ldr	r1, [pc, #56]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 800938a:	4313      	orrs	r3, r2
 800938c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800938e:	f000 f821 	bl	80093d4 <HAL_RCC_GetSysClockFreq>
 8009392:	4602      	mov	r2, r0
 8009394:	4b0b      	ldr	r3, [pc, #44]	@ (80093c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	091b      	lsrs	r3, r3, #4
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	490a      	ldr	r1, [pc, #40]	@ (80093c8 <HAL_RCC_ClockConfig+0x1c8>)
 80093a0:	5ccb      	ldrb	r3, [r1, r3]
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	4a09      	ldr	r2, [pc, #36]	@ (80093cc <HAL_RCC_ClockConfig+0x1cc>)
 80093a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80093aa:	4b09      	ldr	r3, [pc, #36]	@ (80093d0 <HAL_RCC_ClockConfig+0x1d0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff f9a4 	bl	80086fc <HAL_InitTick>

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	40022000 	.word	0x40022000
 80093c4:	40021000 	.word	0x40021000
 80093c8:	0800a2f8 	.word	0x0800a2f8
 80093cc:	20000000 	.word	0x20000000
 80093d0:	20000004 	.word	0x20000004

080093d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	2300      	movs	r3, #0
 80093e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80093ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009468 <HAL_RCC_GetSysClockFreq+0x94>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f003 030c 	and.w	r3, r3, #12
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d002      	beq.n	8009404 <HAL_RCC_GetSysClockFreq+0x30>
 80093fe:	2b08      	cmp	r3, #8
 8009400:	d003      	beq.n	800940a <HAL_RCC_GetSysClockFreq+0x36>
 8009402:	e027      	b.n	8009454 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009404:	4b19      	ldr	r3, [pc, #100]	@ (800946c <HAL_RCC_GetSysClockFreq+0x98>)
 8009406:	613b      	str	r3, [r7, #16]
      break;
 8009408:	e027      	b.n	800945a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	0c9b      	lsrs	r3, r3, #18
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	4a17      	ldr	r2, [pc, #92]	@ (8009470 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009414:	5cd3      	ldrb	r3, [r2, r3]
 8009416:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d010      	beq.n	8009444 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009422:	4b11      	ldr	r3, [pc, #68]	@ (8009468 <HAL_RCC_GetSysClockFreq+0x94>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	0c5b      	lsrs	r3, r3, #17
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <HAL_RCC_GetSysClockFreq+0xa0>)
 800942e:	5cd3      	ldrb	r3, [r2, r3]
 8009430:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a0d      	ldr	r2, [pc, #52]	@ (800946c <HAL_RCC_GetSysClockFreq+0x98>)
 8009436:	fb03 f202 	mul.w	r2, r3, r2
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e004      	b.n	800944e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a0c      	ldr	r2, [pc, #48]	@ (8009478 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	613b      	str	r3, [r7, #16]
      break;
 8009452:	e002      	b.n	800945a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009454:	4b05      	ldr	r3, [pc, #20]	@ (800946c <HAL_RCC_GetSysClockFreq+0x98>)
 8009456:	613b      	str	r3, [r7, #16]
      break;
 8009458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800945a:	693b      	ldr	r3, [r7, #16]
}
 800945c:	4618      	mov	r0, r3
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40021000 	.word	0x40021000
 800946c:	007a1200 	.word	0x007a1200
 8009470:	0800a310 	.word	0x0800a310
 8009474:	0800a320 	.word	0x0800a320
 8009478:	003d0900 	.word	0x003d0900

0800947c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009480:	4b02      	ldr	r3, [pc, #8]	@ (800948c <HAL_RCC_GetHCLKFreq+0x10>)
 8009482:	681b      	ldr	r3, [r3, #0]
}
 8009484:	4618      	mov	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr
 800948c:	20000000 	.word	0x20000000

08009490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009494:	f7ff fff2 	bl	800947c <HAL_RCC_GetHCLKFreq>
 8009498:	4602      	mov	r2, r0
 800949a:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	4903      	ldr	r1, [pc, #12]	@ (80094b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094a6:	5ccb      	ldrb	r3, [r1, r3]
 80094a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40021000 	.word	0x40021000
 80094b4:	0800a308 	.word	0x0800a308

080094b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80094bc:	f7ff ffde 	bl	800947c <HAL_RCC_GetHCLKFreq>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	0adb      	lsrs	r3, r3, #11
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	4903      	ldr	r1, [pc, #12]	@ (80094dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80094ce:	5ccb      	ldrb	r3, [r1, r3]
 80094d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40021000 	.word	0x40021000
 80094dc:	0800a308 	.word	0x0800a308

080094e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80094e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009514 <RCC_Delay+0x34>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <RCC_Delay+0x38>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	0a5b      	lsrs	r3, r3, #9
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80094fc:	bf00      	nop
  }
  while (Delay --);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	60fa      	str	r2, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1f9      	bne.n	80094fc <RCC_Delay+0x1c>
}
 8009508:	bf00      	nop
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr
 8009514:	20000000 	.word	0x20000000
 8009518:	10624dd3 	.word	0x10624dd3

0800951c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e042      	b.n	80095b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fe ff94 	bl	8008470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2224      	movs	r2, #36	@ 0x24
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800955e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f971 	bl	8009848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	@ 0x28
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d175      	bne.n	80096c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_UART_Transmit+0x2c>
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e06e      	b.n	80096ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2221      	movs	r2, #33	@ 0x21
 80095f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095fa:	f7ff f8c1 	bl	8008780 <HAL_GetTick>
 80095fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	88fa      	ldrh	r2, [r7, #6]
 800960a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009614:	d108      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	e003      	b.n	8009630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009630:	e02e      	b.n	8009690 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2200      	movs	r2, #0
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f848 	bl	80096d2 <UART_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e03a      	b.n	80096ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10b      	bne.n	8009672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009668:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	3302      	adds	r3, #2
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	e007      	b.n	8009682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3301      	adds	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009686:	b29b      	uxth	r3, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1cb      	bne.n	8009632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2200      	movs	r2, #0
 80096a2:	2140      	movs	r1, #64	@ 0x40
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 f814 	bl	80096d2 <UART_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e006      	b.n	80096ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	e000      	b.n	80096ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096c8:	2302      	movs	r3, #2
  }
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	603b      	str	r3, [r7, #0]
 80096de:	4613      	mov	r3, r2
 80096e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e2:	e03b      	b.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096ea:	d037      	beq.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ec:	f7ff f848 	bl	8008780 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	6a3a      	ldr	r2, [r7, #32]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d302      	bcc.n	8009702 <UART_WaitOnFlagUntilTimeout+0x30>
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e03a      	b.n	800977c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d023      	beq.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b80      	cmp	r3, #128	@ 0x80
 8009718:	d020      	beq.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b40      	cmp	r3, #64	@ 0x40
 800971e:	d01d      	beq.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b08      	cmp	r3, #8
 800972c:	d116      	bne.n	800975c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f81d 	bl	8009784 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2208      	movs	r2, #8
 800974e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	e00f      	b.n	800977c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	bf0c      	ite	eq
 800976c:	2301      	moveq	r3, #1
 800976e:	2300      	movne	r3, #0
 8009770:	b2db      	uxtb	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	429a      	cmp	r2, r3
 8009778:	d0b4      	beq.n	80096e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009784:	b480      	push	{r7}
 8009786:	b095      	sub	sp, #84	@ 0x54
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	330c      	adds	r3, #12
 80097aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e5      	bne.n	800978c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3314      	adds	r3, #20
 80097c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e5      	bne.n	80097c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d119      	bne.n	8009830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	330c      	adds	r3, #12
 8009802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	60bb      	str	r3, [r7, #8]
   return(result);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f023 0310 	bic.w	r3, r3, #16
 8009812:	647b      	str	r3, [r7, #68]	@ 0x44
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	330c      	adds	r3, #12
 800981a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800981c:	61ba      	str	r2, [r7, #24]
 800981e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6979      	ldr	r1, [r7, #20]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	613b      	str	r3, [r7, #16]
   return(result);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e5      	bne.n	80097fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800983e:	bf00      	nop
 8009840:	3754      	adds	r7, #84	@ 0x54
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr

08009848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009882:	f023 030c 	bic.w	r3, r3, #12
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	430b      	orrs	r3, r1
 800988e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699a      	ldr	r2, [r3, #24]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a2c      	ldr	r2, [pc, #176]	@ (800995c <UART_SetConfig+0x114>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d103      	bne.n	80098b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80098b0:	f7ff fe02 	bl	80094b8 <HAL_RCC_GetPCLK2Freq>
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	e002      	b.n	80098be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7ff fdea 	bl	8009490 <HAL_RCC_GetPCLK1Freq>
 80098bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009a      	lsls	r2, r3, #2
 80098c8:	441a      	add	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	4a22      	ldr	r2, [pc, #136]	@ (8009960 <UART_SetConfig+0x118>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	0119      	lsls	r1, r3, #4
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009a      	lsls	r2, r3, #2
 80098e8:	441a      	add	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009960 <UART_SetConfig+0x118>)
 80098f6:	fba3 0302 	umull	r0, r3, r3, r2
 80098fa:	095b      	lsrs	r3, r3, #5
 80098fc:	2064      	movs	r0, #100	@ 0x64
 80098fe:	fb00 f303 	mul.w	r3, r0, r3
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	3332      	adds	r3, #50	@ 0x32
 8009908:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <UART_SetConfig+0x118>)
 800990a:	fba2 2303 	umull	r2, r3, r2, r3
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009914:	4419      	add	r1, r3
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009a      	lsls	r2, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	fbb2 f2f3 	udiv	r2, r2, r3
 800992c:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <UART_SetConfig+0x118>)
 800992e:	fba3 0302 	umull	r0, r3, r3, r2
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	2064      	movs	r0, #100	@ 0x64
 8009936:	fb00 f303 	mul.w	r3, r0, r3
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	011b      	lsls	r3, r3, #4
 800993e:	3332      	adds	r3, #50	@ 0x32
 8009940:	4a07      	ldr	r2, [pc, #28]	@ (8009960 <UART_SetConfig+0x118>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	440a      	add	r2, r1
 8009952:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009954:	bf00      	nop
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	40013800 	.word	0x40013800
 8009960:	51eb851f 	.word	0x51eb851f

08009964 <std>:
 8009964:	2300      	movs	r3, #0
 8009966:	b510      	push	{r4, lr}
 8009968:	4604      	mov	r4, r0
 800996a:	e9c0 3300 	strd	r3, r3, [r0]
 800996e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009972:	6083      	str	r3, [r0, #8]
 8009974:	8181      	strh	r1, [r0, #12]
 8009976:	6643      	str	r3, [r0, #100]	@ 0x64
 8009978:	81c2      	strh	r2, [r0, #14]
 800997a:	6183      	str	r3, [r0, #24]
 800997c:	4619      	mov	r1, r3
 800997e:	2208      	movs	r2, #8
 8009980:	305c      	adds	r0, #92	@ 0x5c
 8009982:	f000 f90f 	bl	8009ba4 <memset>
 8009986:	4b0d      	ldr	r3, [pc, #52]	@ (80099bc <std+0x58>)
 8009988:	6224      	str	r4, [r4, #32]
 800998a:	6263      	str	r3, [r4, #36]	@ 0x24
 800998c:	4b0c      	ldr	r3, [pc, #48]	@ (80099c0 <std+0x5c>)
 800998e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009990:	4b0c      	ldr	r3, [pc, #48]	@ (80099c4 <std+0x60>)
 8009992:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009994:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <std+0x64>)
 8009996:	6323      	str	r3, [r4, #48]	@ 0x30
 8009998:	4b0c      	ldr	r3, [pc, #48]	@ (80099cc <std+0x68>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d006      	beq.n	80099ac <std+0x48>
 800999e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099a2:	4294      	cmp	r4, r2
 80099a4:	d002      	beq.n	80099ac <std+0x48>
 80099a6:	33d0      	adds	r3, #208	@ 0xd0
 80099a8:	429c      	cmp	r4, r3
 80099aa:	d105      	bne.n	80099b8 <std+0x54>
 80099ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b4:	f000 b928 	b.w	8009c08 <__retarget_lock_init_recursive>
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	bf00      	nop
 80099bc:	08009ebd 	.word	0x08009ebd
 80099c0:	08009edf 	.word	0x08009edf
 80099c4:	08009f17 	.word	0x08009f17
 80099c8:	08009f3b 	.word	0x08009f3b
 80099cc:	200000d4 	.word	0x200000d4

080099d0 <stdio_exit_handler>:
 80099d0:	4a02      	ldr	r2, [pc, #8]	@ (80099dc <stdio_exit_handler+0xc>)
 80099d2:	4903      	ldr	r1, [pc, #12]	@ (80099e0 <stdio_exit_handler+0x10>)
 80099d4:	4803      	ldr	r0, [pc, #12]	@ (80099e4 <stdio_exit_handler+0x14>)
 80099d6:	f000 b869 	b.w	8009aac <_fwalk_sglue>
 80099da:	bf00      	nop
 80099dc:	2000000c 	.word	0x2000000c
 80099e0:	08009e55 	.word	0x08009e55
 80099e4:	2000001c 	.word	0x2000001c

080099e8 <cleanup_stdio>:
 80099e8:	6841      	ldr	r1, [r0, #4]
 80099ea:	4b0c      	ldr	r3, [pc, #48]	@ (8009a1c <cleanup_stdio+0x34>)
 80099ec:	b510      	push	{r4, lr}
 80099ee:	4299      	cmp	r1, r3
 80099f0:	4604      	mov	r4, r0
 80099f2:	d001      	beq.n	80099f8 <cleanup_stdio+0x10>
 80099f4:	f000 fa2e 	bl	8009e54 <_fflush_r>
 80099f8:	68a1      	ldr	r1, [r4, #8]
 80099fa:	4b09      	ldr	r3, [pc, #36]	@ (8009a20 <cleanup_stdio+0x38>)
 80099fc:	4299      	cmp	r1, r3
 80099fe:	d002      	beq.n	8009a06 <cleanup_stdio+0x1e>
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fa27 	bl	8009e54 <_fflush_r>
 8009a06:	68e1      	ldr	r1, [r4, #12]
 8009a08:	4b06      	ldr	r3, [pc, #24]	@ (8009a24 <cleanup_stdio+0x3c>)
 8009a0a:	4299      	cmp	r1, r3
 8009a0c:	d004      	beq.n	8009a18 <cleanup_stdio+0x30>
 8009a0e:	4620      	mov	r0, r4
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f000 ba1e 	b.w	8009e54 <_fflush_r>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200000d4 	.word	0x200000d4
 8009a20:	2000013c 	.word	0x2000013c
 8009a24:	200001a4 	.word	0x200001a4

08009a28 <global_stdio_init.part.0>:
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a58 <global_stdio_init.part.0+0x30>)
 8009a2c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a5c <global_stdio_init.part.0+0x34>)
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a60 <global_stdio_init.part.0+0x38>)
 8009a30:	4620      	mov	r0, r4
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	2104      	movs	r1, #4
 8009a36:	2200      	movs	r2, #0
 8009a38:	f7ff ff94 	bl	8009964 <std>
 8009a3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a40:	2201      	movs	r2, #1
 8009a42:	2109      	movs	r1, #9
 8009a44:	f7ff ff8e 	bl	8009964 <std>
 8009a48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a52:	2112      	movs	r1, #18
 8009a54:	f7ff bf86 	b.w	8009964 <std>
 8009a58:	2000020c 	.word	0x2000020c
 8009a5c:	200000d4 	.word	0x200000d4
 8009a60:	080099d1 	.word	0x080099d1

08009a64 <__sfp_lock_acquire>:
 8009a64:	4801      	ldr	r0, [pc, #4]	@ (8009a6c <__sfp_lock_acquire+0x8>)
 8009a66:	f000 b8d0 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	20000211 	.word	0x20000211

08009a70 <__sfp_lock_release>:
 8009a70:	4801      	ldr	r0, [pc, #4]	@ (8009a78 <__sfp_lock_release+0x8>)
 8009a72:	f000 b8cb 	b.w	8009c0c <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	20000211 	.word	0x20000211

08009a7c <__sinit>:
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	4604      	mov	r4, r0
 8009a80:	f7ff fff0 	bl	8009a64 <__sfp_lock_acquire>
 8009a84:	6a23      	ldr	r3, [r4, #32]
 8009a86:	b11b      	cbz	r3, 8009a90 <__sinit+0x14>
 8009a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8c:	f7ff bff0 	b.w	8009a70 <__sfp_lock_release>
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <__sinit+0x28>)
 8009a92:	6223      	str	r3, [r4, #32]
 8009a94:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <__sinit+0x2c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1f5      	bne.n	8009a88 <__sinit+0xc>
 8009a9c:	f7ff ffc4 	bl	8009a28 <global_stdio_init.part.0>
 8009aa0:	e7f2      	b.n	8009a88 <__sinit+0xc>
 8009aa2:	bf00      	nop
 8009aa4:	080099e9 	.word	0x080099e9
 8009aa8:	2000020c 	.word	0x2000020c

08009aac <_fwalk_sglue>:
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	4688      	mov	r8, r1
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009abc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ac0:	d505      	bpl.n	8009ace <_fwalk_sglue+0x22>
 8009ac2:	6824      	ldr	r4, [r4, #0]
 8009ac4:	2c00      	cmp	r4, #0
 8009ac6:	d1f7      	bne.n	8009ab8 <_fwalk_sglue+0xc>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d907      	bls.n	8009ae4 <_fwalk_sglue+0x38>
 8009ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	d003      	beq.n	8009ae4 <_fwalk_sglue+0x38>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	4306      	orrs	r6, r0
 8009ae4:	3568      	adds	r5, #104	@ 0x68
 8009ae6:	e7e9      	b.n	8009abc <_fwalk_sglue+0x10>

08009ae8 <_puts_r>:
 8009ae8:	6a03      	ldr	r3, [r0, #32]
 8009aea:	b570      	push	{r4, r5, r6, lr}
 8009aec:	4605      	mov	r5, r0
 8009aee:	460e      	mov	r6, r1
 8009af0:	6884      	ldr	r4, [r0, #8]
 8009af2:	b90b      	cbnz	r3, 8009af8 <_puts_r+0x10>
 8009af4:	f7ff ffc2 	bl	8009a7c <__sinit>
 8009af8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009afa:	07db      	lsls	r3, r3, #31
 8009afc:	d405      	bmi.n	8009b0a <_puts_r+0x22>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	0598      	lsls	r0, r3, #22
 8009b02:	d402      	bmi.n	8009b0a <_puts_r+0x22>
 8009b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b06:	f000 f880 	bl	8009c0a <__retarget_lock_acquire_recursive>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	0719      	lsls	r1, r3, #28
 8009b0e:	d502      	bpl.n	8009b16 <_puts_r+0x2e>
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d135      	bne.n	8009b82 <_puts_r+0x9a>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 fa51 	bl	8009fc0 <__swsetup_r>
 8009b1e:	b380      	cbz	r0, 8009b82 <_puts_r+0x9a>
 8009b20:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009b24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b26:	07da      	lsls	r2, r3, #31
 8009b28:	d405      	bmi.n	8009b36 <_puts_r+0x4e>
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	059b      	lsls	r3, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_puts_r+0x4e>
 8009b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b32:	f000 f86b 	bl	8009c0c <__retarget_lock_release_recursive>
 8009b36:	4628      	mov	r0, r5
 8009b38:	bd70      	pop	{r4, r5, r6, pc}
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	da04      	bge.n	8009b48 <_puts_r+0x60>
 8009b3e:	69a2      	ldr	r2, [r4, #24]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	dc17      	bgt.n	8009b74 <_puts_r+0x8c>
 8009b44:	290a      	cmp	r1, #10
 8009b46:	d015      	beq.n	8009b74 <_puts_r+0x8c>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	7019      	strb	r1, [r3, #0]
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b56:	3b01      	subs	r3, #1
 8009b58:	60a3      	str	r3, [r4, #8]
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d1ed      	bne.n	8009b3a <_puts_r+0x52>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da11      	bge.n	8009b86 <_puts_r+0x9e>
 8009b62:	4622      	mov	r2, r4
 8009b64:	210a      	movs	r1, #10
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 f9eb 	bl	8009f42 <__swbuf_r>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d0d7      	beq.n	8009b20 <_puts_r+0x38>
 8009b70:	250a      	movs	r5, #10
 8009b72:	e7d7      	b.n	8009b24 <_puts_r+0x3c>
 8009b74:	4622      	mov	r2, r4
 8009b76:	4628      	mov	r0, r5
 8009b78:	f000 f9e3 	bl	8009f42 <__swbuf_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d1e7      	bne.n	8009b50 <_puts_r+0x68>
 8009b80:	e7ce      	b.n	8009b20 <_puts_r+0x38>
 8009b82:	3e01      	subs	r6, #1
 8009b84:	e7e4      	b.n	8009b50 <_puts_r+0x68>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	6022      	str	r2, [r4, #0]
 8009b8c:	220a      	movs	r2, #10
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e7ee      	b.n	8009b70 <_puts_r+0x88>
	...

08009b94 <puts>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	@ (8009ba0 <puts+0xc>)
 8009b96:	4601      	mov	r1, r0
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f7ff bfa5 	b.w	8009ae8 <_puts_r>
 8009b9e:	bf00      	nop
 8009ba0:	20000018 	.word	0x20000018

08009ba4 <memset>:
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	4402      	add	r2, r0
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d100      	bne.n	8009bae <memset+0xa>
 8009bac:	4770      	bx	lr
 8009bae:	f803 1b01 	strb.w	r1, [r3], #1
 8009bb2:	e7f9      	b.n	8009ba8 <memset+0x4>

08009bb4 <__errno>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	@ (8009bbc <__errno+0x8>)
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000018 	.word	0x20000018

08009bc0 <__libc_init_array>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	2600      	movs	r6, #0
 8009bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8009bf8 <__libc_init_array+0x38>)
 8009bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8009bfc <__libc_init_array+0x3c>)
 8009bc8:	1b64      	subs	r4, r4, r5
 8009bca:	10a4      	asrs	r4, r4, #2
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	d109      	bne.n	8009be4 <__libc_init_array+0x24>
 8009bd0:	f000 fb6e 	bl	800a2b0 <_init>
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8009c00 <__libc_init_array+0x40>)
 8009bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8009c04 <__libc_init_array+0x44>)
 8009bda:	1b64      	subs	r4, r4, r5
 8009bdc:	10a4      	asrs	r4, r4, #2
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	d105      	bne.n	8009bee <__libc_init_array+0x2e>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be8:	4798      	blx	r3
 8009bea:	3601      	adds	r6, #1
 8009bec:	e7ee      	b.n	8009bcc <__libc_init_array+0xc>
 8009bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf2:	4798      	blx	r3
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	e7f2      	b.n	8009bde <__libc_init_array+0x1e>
 8009bf8:	0800a324 	.word	0x0800a324
 8009bfc:	0800a324 	.word	0x0800a324
 8009c00:	0800a324 	.word	0x0800a324
 8009c04:	0800a328 	.word	0x0800a328

08009c08 <__retarget_lock_init_recursive>:
 8009c08:	4770      	bx	lr

08009c0a <__retarget_lock_acquire_recursive>:
 8009c0a:	4770      	bx	lr

08009c0c <__retarget_lock_release_recursive>:
 8009c0c:	4770      	bx	lr
	...

08009c10 <sbrk_aligned>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4e0f      	ldr	r6, [pc, #60]	@ (8009c50 <sbrk_aligned+0x40>)
 8009c14:	460c      	mov	r4, r1
 8009c16:	6831      	ldr	r1, [r6, #0]
 8009c18:	4605      	mov	r5, r0
 8009c1a:	b911      	cbnz	r1, 8009c22 <sbrk_aligned+0x12>
 8009c1c:	f000 fabc 	bl	800a198 <_sbrk_r>
 8009c20:	6030      	str	r0, [r6, #0]
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 fab7 	bl	800a198 <_sbrk_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d103      	bne.n	8009c36 <sbrk_aligned+0x26>
 8009c2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009c32:	4620      	mov	r0, r4
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	1cc4      	adds	r4, r0, #3
 8009c38:	f024 0403 	bic.w	r4, r4, #3
 8009c3c:	42a0      	cmp	r0, r4
 8009c3e:	d0f8      	beq.n	8009c32 <sbrk_aligned+0x22>
 8009c40:	1a21      	subs	r1, r4, r0
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 faa8 	bl	800a198 <_sbrk_r>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d1f2      	bne.n	8009c32 <sbrk_aligned+0x22>
 8009c4c:	e7ef      	b.n	8009c2e <sbrk_aligned+0x1e>
 8009c4e:	bf00      	nop
 8009c50:	20000214 	.word	0x20000214

08009c54 <_malloc_r>:
 8009c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c58:	1ccd      	adds	r5, r1, #3
 8009c5a:	f025 0503 	bic.w	r5, r5, #3
 8009c5e:	3508      	adds	r5, #8
 8009c60:	2d0c      	cmp	r5, #12
 8009c62:	bf38      	it	cc
 8009c64:	250c      	movcc	r5, #12
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	4606      	mov	r6, r0
 8009c6a:	db01      	blt.n	8009c70 <_malloc_r+0x1c>
 8009c6c:	42a9      	cmp	r1, r5
 8009c6e:	d904      	bls.n	8009c7a <_malloc_r+0x26>
 8009c70:	230c      	movs	r3, #12
 8009c72:	6033      	str	r3, [r6, #0]
 8009c74:	2000      	movs	r0, #0
 8009c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d50 <_malloc_r+0xfc>
 8009c7e:	f000 f911 	bl	8009ea4 <__malloc_lock>
 8009c82:	f8d8 3000 	ldr.w	r3, [r8]
 8009c86:	461c      	mov	r4, r3
 8009c88:	bb44      	cbnz	r4, 8009cdc <_malloc_r+0x88>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff ffbf 	bl	8009c10 <sbrk_aligned>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	4604      	mov	r4, r0
 8009c96:	d158      	bne.n	8009d4a <_malloc_r+0xf6>
 8009c98:	f8d8 4000 	ldr.w	r4, [r8]
 8009c9c:	4627      	mov	r7, r4
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	d143      	bne.n	8009d2a <_malloc_r+0xd6>
 8009ca2:	2c00      	cmp	r4, #0
 8009ca4:	d04b      	beq.n	8009d3e <_malloc_r+0xea>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4630      	mov	r0, r6
 8009cac:	eb04 0903 	add.w	r9, r4, r3
 8009cb0:	f000 fa72 	bl	800a198 <_sbrk_r>
 8009cb4:	4581      	cmp	r9, r0
 8009cb6:	d142      	bne.n	8009d3e <_malloc_r+0xea>
 8009cb8:	6821      	ldr	r1, [r4, #0]
 8009cba:	4630      	mov	r0, r6
 8009cbc:	1a6d      	subs	r5, r5, r1
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	f7ff ffa6 	bl	8009c10 <sbrk_aligned>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d03a      	beq.n	8009d3e <_malloc_r+0xea>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	442b      	add	r3, r5
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	bb62      	cbnz	r2, 8009d30 <_malloc_r+0xdc>
 8009cd6:	f8c8 7000 	str.w	r7, [r8]
 8009cda:	e00f      	b.n	8009cfc <_malloc_r+0xa8>
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	1b52      	subs	r2, r2, r5
 8009ce0:	d420      	bmi.n	8009d24 <_malloc_r+0xd0>
 8009ce2:	2a0b      	cmp	r2, #11
 8009ce4:	d917      	bls.n	8009d16 <_malloc_r+0xc2>
 8009ce6:	1961      	adds	r1, r4, r5
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	6025      	str	r5, [r4, #0]
 8009cec:	bf18      	it	ne
 8009cee:	6059      	strne	r1, [r3, #4]
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	bf08      	it	eq
 8009cf4:	f8c8 1000 	streq.w	r1, [r8]
 8009cf8:	5162      	str	r2, [r4, r5]
 8009cfa:	604b      	str	r3, [r1, #4]
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 f8d7 	bl	8009eb0 <__malloc_unlock>
 8009d02:	f104 000b 	add.w	r0, r4, #11
 8009d06:	1d23      	adds	r3, r4, #4
 8009d08:	f020 0007 	bic.w	r0, r0, #7
 8009d0c:	1ac2      	subs	r2, r0, r3
 8009d0e:	bf1c      	itt	ne
 8009d10:	1a1b      	subne	r3, r3, r0
 8009d12:	50a3      	strne	r3, [r4, r2]
 8009d14:	e7af      	b.n	8009c76 <_malloc_r+0x22>
 8009d16:	6862      	ldr	r2, [r4, #4]
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	bf0c      	ite	eq
 8009d1c:	f8c8 2000 	streq.w	r2, [r8]
 8009d20:	605a      	strne	r2, [r3, #4]
 8009d22:	e7eb      	b.n	8009cfc <_malloc_r+0xa8>
 8009d24:	4623      	mov	r3, r4
 8009d26:	6864      	ldr	r4, [r4, #4]
 8009d28:	e7ae      	b.n	8009c88 <_malloc_r+0x34>
 8009d2a:	463c      	mov	r4, r7
 8009d2c:	687f      	ldr	r7, [r7, #4]
 8009d2e:	e7b6      	b.n	8009c9e <_malloc_r+0x4a>
 8009d30:	461a      	mov	r2, r3
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	42a3      	cmp	r3, r4
 8009d36:	d1fb      	bne.n	8009d30 <_malloc_r+0xdc>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	6053      	str	r3, [r2, #4]
 8009d3c:	e7de      	b.n	8009cfc <_malloc_r+0xa8>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	4630      	mov	r0, r6
 8009d42:	6033      	str	r3, [r6, #0]
 8009d44:	f000 f8b4 	bl	8009eb0 <__malloc_unlock>
 8009d48:	e794      	b.n	8009c74 <_malloc_r+0x20>
 8009d4a:	6005      	str	r5, [r0, #0]
 8009d4c:	e7d6      	b.n	8009cfc <_malloc_r+0xa8>
 8009d4e:	bf00      	nop
 8009d50:	20000218 	.word	0x20000218

08009d54 <__sflush_r>:
 8009d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	0716      	lsls	r6, r2, #28
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	d454      	bmi.n	8009e0c <__sflush_r+0xb8>
 8009d62:	684b      	ldr	r3, [r1, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dc02      	bgt.n	8009d6e <__sflush_r+0x1a>
 8009d68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	dd48      	ble.n	8009e00 <__sflush_r+0xac>
 8009d6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	d045      	beq.n	8009e00 <__sflush_r+0xac>
 8009d74:	2300      	movs	r3, #0
 8009d76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d7a:	682f      	ldr	r7, [r5, #0]
 8009d7c:	6a21      	ldr	r1, [r4, #32]
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	d030      	beq.n	8009de4 <__sflush_r+0x90>
 8009d82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	0759      	lsls	r1, r3, #29
 8009d88:	d505      	bpl.n	8009d96 <__sflush_r+0x42>
 8009d8a:	6863      	ldr	r3, [r4, #4]
 8009d8c:	1ad2      	subs	r2, r2, r3
 8009d8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d90:	b10b      	cbz	r3, 8009d96 <__sflush_r+0x42>
 8009d92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d94:	1ad2      	subs	r2, r2, r3
 8009d96:	2300      	movs	r3, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d9c:	6a21      	ldr	r1, [r4, #32]
 8009d9e:	47b0      	blx	r6
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	d106      	bne.n	8009db4 <__sflush_r+0x60>
 8009da6:	6829      	ldr	r1, [r5, #0]
 8009da8:	291d      	cmp	r1, #29
 8009daa:	d82b      	bhi.n	8009e04 <__sflush_r+0xb0>
 8009dac:	4a28      	ldr	r2, [pc, #160]	@ (8009e50 <__sflush_r+0xfc>)
 8009dae:	40ca      	lsrs	r2, r1
 8009db0:	07d6      	lsls	r6, r2, #31
 8009db2:	d527      	bpl.n	8009e04 <__sflush_r+0xb0>
 8009db4:	2200      	movs	r2, #0
 8009db6:	6062      	str	r2, [r4, #4]
 8009db8:	6922      	ldr	r2, [r4, #16]
 8009dba:	04d9      	lsls	r1, r3, #19
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	d504      	bpl.n	8009dca <__sflush_r+0x76>
 8009dc0:	1c42      	adds	r2, r0, #1
 8009dc2:	d101      	bne.n	8009dc8 <__sflush_r+0x74>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b903      	cbnz	r3, 8009dca <__sflush_r+0x76>
 8009dc8:	6560      	str	r0, [r4, #84]	@ 0x54
 8009dca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dcc:	602f      	str	r7, [r5, #0]
 8009dce:	b1b9      	cbz	r1, 8009e00 <__sflush_r+0xac>
 8009dd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	d002      	beq.n	8009dde <__sflush_r+0x8a>
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 fa21 	bl	800a220 <_free_r>
 8009dde:	2300      	movs	r3, #0
 8009de0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009de2:	e00d      	b.n	8009e00 <__sflush_r+0xac>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b0      	blx	r6
 8009dea:	4602      	mov	r2, r0
 8009dec:	1c50      	adds	r0, r2, #1
 8009dee:	d1c9      	bne.n	8009d84 <__sflush_r+0x30>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0c6      	beq.n	8009d84 <__sflush_r+0x30>
 8009df6:	2b1d      	cmp	r3, #29
 8009df8:	d001      	beq.n	8009dfe <__sflush_r+0xaa>
 8009dfa:	2b16      	cmp	r3, #22
 8009dfc:	d11d      	bne.n	8009e3a <__sflush_r+0xe6>
 8009dfe:	602f      	str	r7, [r5, #0]
 8009e00:	2000      	movs	r0, #0
 8009e02:	e021      	b.n	8009e48 <__sflush_r+0xf4>
 8009e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e08:	b21b      	sxth	r3, r3
 8009e0a:	e01a      	b.n	8009e42 <__sflush_r+0xee>
 8009e0c:	690f      	ldr	r7, [r1, #16]
 8009e0e:	2f00      	cmp	r7, #0
 8009e10:	d0f6      	beq.n	8009e00 <__sflush_r+0xac>
 8009e12:	0793      	lsls	r3, r2, #30
 8009e14:	bf18      	it	ne
 8009e16:	2300      	movne	r3, #0
 8009e18:	680e      	ldr	r6, [r1, #0]
 8009e1a:	bf08      	it	eq
 8009e1c:	694b      	ldreq	r3, [r1, #20]
 8009e1e:	1bf6      	subs	r6, r6, r7
 8009e20:	600f      	str	r7, [r1, #0]
 8009e22:	608b      	str	r3, [r1, #8]
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	ddeb      	ble.n	8009e00 <__sflush_r+0xac>
 8009e28:	4633      	mov	r3, r6
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	6a21      	ldr	r1, [r4, #32]
 8009e30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009e34:	47e0      	blx	ip
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dc07      	bgt.n	8009e4a <__sflush_r+0xf6>
 8009e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e4a:	4407      	add	r7, r0
 8009e4c:	1a36      	subs	r6, r6, r0
 8009e4e:	e7e9      	b.n	8009e24 <__sflush_r+0xd0>
 8009e50:	20400001 	.word	0x20400001

08009e54 <_fflush_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	690b      	ldr	r3, [r1, #16]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	b913      	cbnz	r3, 8009e64 <_fflush_r+0x10>
 8009e5e:	2500      	movs	r5, #0
 8009e60:	4628      	mov	r0, r5
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	b118      	cbz	r0, 8009e6e <_fflush_r+0x1a>
 8009e66:	6a03      	ldr	r3, [r0, #32]
 8009e68:	b90b      	cbnz	r3, 8009e6e <_fflush_r+0x1a>
 8009e6a:	f7ff fe07 	bl	8009a7c <__sinit>
 8009e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d0f3      	beq.n	8009e5e <_fflush_r+0xa>
 8009e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e78:	07d0      	lsls	r0, r2, #31
 8009e7a:	d404      	bmi.n	8009e86 <_fflush_r+0x32>
 8009e7c:	0599      	lsls	r1, r3, #22
 8009e7e:	d402      	bmi.n	8009e86 <_fflush_r+0x32>
 8009e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e82:	f7ff fec2 	bl	8009c0a <__retarget_lock_acquire_recursive>
 8009e86:	4628      	mov	r0, r5
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f7ff ff63 	bl	8009d54 <__sflush_r>
 8009e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e90:	4605      	mov	r5, r0
 8009e92:	07da      	lsls	r2, r3, #31
 8009e94:	d4e4      	bmi.n	8009e60 <_fflush_r+0xc>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	059b      	lsls	r3, r3, #22
 8009e9a:	d4e1      	bmi.n	8009e60 <_fflush_r+0xc>
 8009e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e9e:	f7ff feb5 	bl	8009c0c <__retarget_lock_release_recursive>
 8009ea2:	e7dd      	b.n	8009e60 <_fflush_r+0xc>

08009ea4 <__malloc_lock>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	@ (8009eac <__malloc_lock+0x8>)
 8009ea6:	f7ff beb0 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	20000210 	.word	0x20000210

08009eb0 <__malloc_unlock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	@ (8009eb8 <__malloc_unlock+0x8>)
 8009eb2:	f7ff beab 	b.w	8009c0c <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	20000210 	.word	0x20000210

08009ebc <__sread>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	f000 f956 	bl	800a174 <_read_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	bfab      	itete	ge
 8009ecc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ece:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed0:	181b      	addge	r3, r3, r0
 8009ed2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ed6:	bfac      	ite	ge
 8009ed8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eda:	81a3      	strhlt	r3, [r4, #12]
 8009edc:	bd10      	pop	{r4, pc}

08009ede <__swrite>:
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	461f      	mov	r7, r3
 8009ee4:	898b      	ldrh	r3, [r1, #12]
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	05db      	lsls	r3, r3, #23
 8009eea:	460c      	mov	r4, r1
 8009eec:	4616      	mov	r6, r2
 8009eee:	d505      	bpl.n	8009efc <__swrite+0x1e>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	f000 f92a 	bl	800a150 <_lseek_r>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	4632      	mov	r2, r6
 8009f00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	4628      	mov	r0, r5
 8009f08:	463b      	mov	r3, r7
 8009f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	f000 b951 	b.w	800a1b8 <_write_r>

08009f16 <__sseek>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1e:	f000 f917 	bl	800a150 <_lseek_r>
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	bf15      	itete	ne
 8009f28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f32:	81a3      	strheq	r3, [r4, #12]
 8009f34:	bf18      	it	ne
 8009f36:	81a3      	strhne	r3, [r4, #12]
 8009f38:	bd10      	pop	{r4, pc}

08009f3a <__sclose>:
 8009f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3e:	f000 b94d 	b.w	800a1dc <_close_r>

08009f42 <__swbuf_r>:
 8009f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f44:	460e      	mov	r6, r1
 8009f46:	4614      	mov	r4, r2
 8009f48:	4605      	mov	r5, r0
 8009f4a:	b118      	cbz	r0, 8009f54 <__swbuf_r+0x12>
 8009f4c:	6a03      	ldr	r3, [r0, #32]
 8009f4e:	b90b      	cbnz	r3, 8009f54 <__swbuf_r+0x12>
 8009f50:	f7ff fd94 	bl	8009a7c <__sinit>
 8009f54:	69a3      	ldr	r3, [r4, #24]
 8009f56:	60a3      	str	r3, [r4, #8]
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	071a      	lsls	r2, r3, #28
 8009f5c:	d501      	bpl.n	8009f62 <__swbuf_r+0x20>
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	b943      	cbnz	r3, 8009f74 <__swbuf_r+0x32>
 8009f62:	4621      	mov	r1, r4
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 f82b 	bl	8009fc0 <__swsetup_r>
 8009f6a:	b118      	cbz	r0, 8009f74 <__swbuf_r+0x32>
 8009f6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009f70:	4638      	mov	r0, r7
 8009f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	6922      	ldr	r2, [r4, #16]
 8009f78:	b2f6      	uxtb	r6, r6
 8009f7a:	1a98      	subs	r0, r3, r2
 8009f7c:	6963      	ldr	r3, [r4, #20]
 8009f7e:	4637      	mov	r7, r6
 8009f80:	4283      	cmp	r3, r0
 8009f82:	dc05      	bgt.n	8009f90 <__swbuf_r+0x4e>
 8009f84:	4621      	mov	r1, r4
 8009f86:	4628      	mov	r0, r5
 8009f88:	f7ff ff64 	bl	8009e54 <_fflush_r>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1ed      	bne.n	8009f6c <__swbuf_r+0x2a>
 8009f90:	68a3      	ldr	r3, [r4, #8]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	6022      	str	r2, [r4, #0]
 8009f9c:	701e      	strb	r6, [r3, #0]
 8009f9e:	6962      	ldr	r2, [r4, #20]
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d004      	beq.n	8009fb0 <__swbuf_r+0x6e>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	07db      	lsls	r3, r3, #31
 8009faa:	d5e1      	bpl.n	8009f70 <__swbuf_r+0x2e>
 8009fac:	2e0a      	cmp	r6, #10
 8009fae:	d1df      	bne.n	8009f70 <__swbuf_r+0x2e>
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7ff ff4e 	bl	8009e54 <_fflush_r>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0d9      	beq.n	8009f70 <__swbuf_r+0x2e>
 8009fbc:	e7d6      	b.n	8009f6c <__swbuf_r+0x2a>
	...

08009fc0 <__swsetup_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4b29      	ldr	r3, [pc, #164]	@ (800a068 <__swsetup_r+0xa8>)
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	460c      	mov	r4, r1
 8009fca:	b118      	cbz	r0, 8009fd4 <__swsetup_r+0x14>
 8009fcc:	6a03      	ldr	r3, [r0, #32]
 8009fce:	b90b      	cbnz	r3, 8009fd4 <__swsetup_r+0x14>
 8009fd0:	f7ff fd54 	bl	8009a7c <__sinit>
 8009fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	d422      	bmi.n	800a022 <__swsetup_r+0x62>
 8009fdc:	06da      	lsls	r2, r3, #27
 8009fde:	d407      	bmi.n	8009ff0 <__swsetup_r+0x30>
 8009fe0:	2209      	movs	r2, #9
 8009fe2:	602a      	str	r2, [r5, #0]
 8009fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e033      	b.n	800a058 <__swsetup_r+0x98>
 8009ff0:	0758      	lsls	r0, r3, #29
 8009ff2:	d512      	bpl.n	800a01a <__swsetup_r+0x5a>
 8009ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ff6:	b141      	cbz	r1, 800a00a <__swsetup_r+0x4a>
 8009ff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	d002      	beq.n	800a006 <__swsetup_r+0x46>
 800a000:	4628      	mov	r0, r5
 800a002:	f000 f90d 	bl	800a220 <_free_r>
 800a006:	2300      	movs	r3, #0
 800a008:	6363      	str	r3, [r4, #52]	@ 0x34
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	2300      	movs	r3, #0
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f043 0308 	orr.w	r3, r3, #8
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	b94b      	cbnz	r3, 800a03a <__swsetup_r+0x7a>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a030:	d003      	beq.n	800a03a <__swsetup_r+0x7a>
 800a032:	4621      	mov	r1, r4
 800a034:	4628      	mov	r0, r5
 800a036:	f000 f83e 	bl	800a0b6 <__smakebuf_r>
 800a03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a03e:	f013 0201 	ands.w	r2, r3, #1
 800a042:	d00a      	beq.n	800a05a <__swsetup_r+0x9a>
 800a044:	2200      	movs	r2, #0
 800a046:	60a2      	str	r2, [r4, #8]
 800a048:	6962      	ldr	r2, [r4, #20]
 800a04a:	4252      	negs	r2, r2
 800a04c:	61a2      	str	r2, [r4, #24]
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	b942      	cbnz	r2, 800a064 <__swsetup_r+0xa4>
 800a052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a056:	d1c5      	bne.n	8009fe4 <__swsetup_r+0x24>
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	0799      	lsls	r1, r3, #30
 800a05c:	bf58      	it	pl
 800a05e:	6962      	ldrpl	r2, [r4, #20]
 800a060:	60a2      	str	r2, [r4, #8]
 800a062:	e7f4      	b.n	800a04e <__swsetup_r+0x8e>
 800a064:	2000      	movs	r0, #0
 800a066:	e7f7      	b.n	800a058 <__swsetup_r+0x98>
 800a068:	20000018 	.word	0x20000018

0800a06c <__swhatbuf_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	4615      	mov	r5, r2
 800a076:	2900      	cmp	r1, #0
 800a078:	461e      	mov	r6, r3
 800a07a:	b096      	sub	sp, #88	@ 0x58
 800a07c:	da0c      	bge.n	800a098 <__swhatbuf_r+0x2c>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	2100      	movs	r1, #0
 800a082:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a086:	bf14      	ite	ne
 800a088:	2340      	movne	r3, #64	@ 0x40
 800a08a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a08e:	2000      	movs	r0, #0
 800a090:	6031      	str	r1, [r6, #0]
 800a092:	602b      	str	r3, [r5, #0]
 800a094:	b016      	add	sp, #88	@ 0x58
 800a096:	bd70      	pop	{r4, r5, r6, pc}
 800a098:	466a      	mov	r2, sp
 800a09a:	f000 f8af 	bl	800a1fc <_fstat_r>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	dbed      	blt.n	800a07e <__swhatbuf_r+0x12>
 800a0a2:	9901      	ldr	r1, [sp, #4]
 800a0a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0ac:	4259      	negs	r1, r3
 800a0ae:	4159      	adcs	r1, r3
 800a0b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0b4:	e7eb      	b.n	800a08e <__swhatbuf_r+0x22>

0800a0b6 <__smakebuf_r>:
 800a0b6:	898b      	ldrh	r3, [r1, #12]
 800a0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ba:	079d      	lsls	r5, r3, #30
 800a0bc:	4606      	mov	r6, r0
 800a0be:	460c      	mov	r4, r1
 800a0c0:	d507      	bpl.n	800a0d2 <__smakebuf_r+0x1c>
 800a0c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	6163      	str	r3, [r4, #20]
 800a0ce:	b003      	add	sp, #12
 800a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d2:	466a      	mov	r2, sp
 800a0d4:	ab01      	add	r3, sp, #4
 800a0d6:	f7ff ffc9 	bl	800a06c <__swhatbuf_r>
 800a0da:	9f00      	ldr	r7, [sp, #0]
 800a0dc:	4605      	mov	r5, r0
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff fdb7 	bl	8009c54 <_malloc_r>
 800a0e6:	b948      	cbnz	r0, 800a0fc <__smakebuf_r+0x46>
 800a0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d4ee      	bmi.n	800a0ce <__smakebuf_r+0x18>
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e7e2      	b.n	800a0c2 <__smakebuf_r+0xc>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	6020      	str	r0, [r4, #0]
 800a10c:	b15b      	cbz	r3, 800a126 <__smakebuf_r+0x70>
 800a10e:	4630      	mov	r0, r6
 800a110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a114:	f000 f80c 	bl	800a130 <_isatty_r>
 800a118:	b128      	cbz	r0, 800a126 <__smakebuf_r+0x70>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	431d      	orrs	r5, r3
 800a12a:	81a5      	strh	r5, [r4, #12]
 800a12c:	e7cf      	b.n	800a0ce <__smakebuf_r+0x18>
	...

0800a130 <_isatty_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	2300      	movs	r3, #0
 800a134:	4d05      	ldr	r5, [pc, #20]	@ (800a14c <_isatty_r+0x1c>)
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	f7fe fa47 	bl	80085ce <_isatty>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d102      	bne.n	800a14a <_isatty_r+0x1a>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b103      	cbz	r3, 800a14a <_isatty_r+0x1a>
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	2000021c 	.word	0x2000021c

0800a150 <_lseek_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	2200      	movs	r2, #0
 800a15a:	4d05      	ldr	r5, [pc, #20]	@ (800a170 <_lseek_r+0x20>)
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	f7fe fa3f 	bl	80085e2 <_lseek>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_lseek_r+0x1e>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_lseek_r+0x1e>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	2000021c 	.word	0x2000021c

0800a174 <_read_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	4611      	mov	r1, r2
 800a17c:	2200      	movs	r2, #0
 800a17e:	4d05      	ldr	r5, [pc, #20]	@ (800a194 <_read_r+0x20>)
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7fe f9ec 	bl	8008560 <_read>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_read_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_read_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	2000021c 	.word	0x2000021c

0800a198 <_sbrk_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	2300      	movs	r3, #0
 800a19c:	4d05      	ldr	r5, [pc, #20]	@ (800a1b4 <_sbrk_r+0x1c>)
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	f7fe fa2a 	bl	80085fc <_sbrk>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_sbrk_r+0x1a>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_sbrk_r+0x1a>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	2000021c 	.word	0x2000021c

0800a1b8 <_write_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4d05      	ldr	r5, [pc, #20]	@ (800a1d8 <_write_r+0x20>)
 800a1c4:	602a      	str	r2, [r5, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f7fe f82c 	bl	8008224 <_write>
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d102      	bne.n	800a1d6 <_write_r+0x1e>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	b103      	cbz	r3, 800a1d6 <_write_r+0x1e>
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
 800a1d8:	2000021c 	.word	0x2000021c

0800a1dc <_close_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4d05      	ldr	r5, [pc, #20]	@ (800a1f8 <_close_r+0x1c>)
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	602b      	str	r3, [r5, #0]
 800a1e8:	f7fe f9d7 	bl	800859a <_close>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d102      	bne.n	800a1f6 <_close_r+0x1a>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	b103      	cbz	r3, 800a1f6 <_close_r+0x1a>
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	2000021c 	.word	0x2000021c

0800a1fc <_fstat_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	2300      	movs	r3, #0
 800a200:	4d06      	ldr	r5, [pc, #24]	@ (800a21c <_fstat_r+0x20>)
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	f7fe f9d1 	bl	80085b0 <_fstat>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	d102      	bne.n	800a218 <_fstat_r+0x1c>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b103      	cbz	r3, 800a218 <_fstat_r+0x1c>
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	bd38      	pop	{r3, r4, r5, pc}
 800a21a:	bf00      	nop
 800a21c:	2000021c 	.word	0x2000021c

0800a220 <_free_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4605      	mov	r5, r0
 800a224:	2900      	cmp	r1, #0
 800a226:	d040      	beq.n	800a2aa <_free_r+0x8a>
 800a228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a22c:	1f0c      	subs	r4, r1, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bfb8      	it	lt
 800a232:	18e4      	addlt	r4, r4, r3
 800a234:	f7ff fe36 	bl	8009ea4 <__malloc_lock>
 800a238:	4a1c      	ldr	r2, [pc, #112]	@ (800a2ac <_free_r+0x8c>)
 800a23a:	6813      	ldr	r3, [r2, #0]
 800a23c:	b933      	cbnz	r3, 800a24c <_free_r+0x2c>
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	6014      	str	r4, [r2, #0]
 800a242:	4628      	mov	r0, r5
 800a244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a248:	f7ff be32 	b.w	8009eb0 <__malloc_unlock>
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d908      	bls.n	800a262 <_free_r+0x42>
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	1821      	adds	r1, r4, r0
 800a254:	428b      	cmp	r3, r1
 800a256:	bf01      	itttt	eq
 800a258:	6819      	ldreq	r1, [r3, #0]
 800a25a:	685b      	ldreq	r3, [r3, #4]
 800a25c:	1809      	addeq	r1, r1, r0
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	e7ed      	b.n	800a23e <_free_r+0x1e>
 800a262:	461a      	mov	r2, r3
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	b10b      	cbz	r3, 800a26c <_free_r+0x4c>
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d9fa      	bls.n	800a262 <_free_r+0x42>
 800a26c:	6811      	ldr	r1, [r2, #0]
 800a26e:	1850      	adds	r0, r2, r1
 800a270:	42a0      	cmp	r0, r4
 800a272:	d10b      	bne.n	800a28c <_free_r+0x6c>
 800a274:	6820      	ldr	r0, [r4, #0]
 800a276:	4401      	add	r1, r0
 800a278:	1850      	adds	r0, r2, r1
 800a27a:	4283      	cmp	r3, r0
 800a27c:	6011      	str	r1, [r2, #0]
 800a27e:	d1e0      	bne.n	800a242 <_free_r+0x22>
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	4408      	add	r0, r1
 800a286:	6010      	str	r0, [r2, #0]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	e7da      	b.n	800a242 <_free_r+0x22>
 800a28c:	d902      	bls.n	800a294 <_free_r+0x74>
 800a28e:	230c      	movs	r3, #12
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	e7d6      	b.n	800a242 <_free_r+0x22>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	1821      	adds	r1, r4, r0
 800a298:	428b      	cmp	r3, r1
 800a29a:	bf01      	itttt	eq
 800a29c:	6819      	ldreq	r1, [r3, #0]
 800a29e:	685b      	ldreq	r3, [r3, #4]
 800a2a0:	1809      	addeq	r1, r1, r0
 800a2a2:	6021      	streq	r1, [r4, #0]
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	6054      	str	r4, [r2, #4]
 800a2a8:	e7cb      	b.n	800a242 <_free_r+0x22>
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20000218 	.word	0x20000218

0800a2b0 <_init>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr

0800a2bc <_fini>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr
